|******************************************************************************
|* tdisg082  0  VRC B61U a7 live
|* DAL2 for tdisg082
|* baan
|* 14-12-03 [11:53]
|******************************************************************************
|* Script Type: DAL
|******************************************************************************
                                                                                
	|******************** Includes
	#include <bic_dal2>
	#include "itcmcs2000"	|* DAL(-GUI) Support Defines

	|*************** Table declaration ******************
		table	ttdisg082
		table	ttcisg000
		table	ttfisg000
		
		

|****************************** object hooks **********************************

function extern boolean method.is.allowed(
			long		i.method)
{
	on case i.method
		case DAL_NEW:
		if not new.method.is.allowed() then
			dal.set.error.message("@Cannot insert a record.")	
			return(false)
		endif
		break
	case DAL_UPDATE:
		if not update.method.is.allowed() then
			dal.set.error.message("@Cannot modify this record.")
			return(false)
		endif
		break
	case DAL_DESTROY:
		if not destroy.method.is.allowed() then
			dal.set.error.message("@Cannot delete this record.")
			return(false)
		endif
		break
	endcase

	return(true)
}

function extern long before.open.object.set()
{
	read.parameters()
	define.field.dependencies()
	return(0)
}

function extern long before.save.object(long type)
{
	on case type
		case DAL_NEW :
			if  tcmcs.dll0050.check.and.generate.order.number(
					3, tdisg082.loin, tcisg000.lngp, 
					9, tdisg082.loin) then
				return(DALHOOKERROR)
			endif
			break
		case DAL_UPDATE:
			break
	ENDCASE
	return(0)
}

function extern long set.object.defaults()
{
	tdisg082.loin.set.field.default()
	return(0)
}

function extern long before.new.object()
{		
	tdisg082.loin = tcisg000.lser
	return(0)
}

function extern long before.get.object()
{
	return(0)
}

function extern long after.get.object()
{
	
	return(0)
}

function long read.parameters()
{
	RETIFNOK(tcmcs.dll0095.read.parm("tcisg000"))
	RETIFNOK(tcmcs.dll0095.read.parm("tfisg000"))
	return(0)
}

|**** Dependencies Section ****************************************************

function void define.field.dependencies()
{
	|* Initialize field relations.
	dal.init.field.dependencies()
	
	dal.field.depends.on("tdisg082.bpnm", HOOK_IS_APPLICABLE +
						HOOK_IS_MANDATORY,
					"tdisg082.otbp")
					
	dal.field.depends.on("tdisg082.suno", HOOK_IS_DERIVED,
					"tdisg082.otbp")
					
	dal.field.depends.on("tdisg082.vldt", HOOK_IS_VALID,
					"tdisg082.ldat")
					
	|* Add direct dependent fields.
	|* Please keep the fields in alphabetical order.

	dal.finalize.field.dependencies()
}

function boolean new.method.is.allowed()
{
	return(true)
}

function boolean update.method.is.allowed()
{
	return(true)
}
function boolean destroy.method.is.allowed()
{
			long		delete.allowed

	with.old.object.values.do(	deleting_allowed,
					delete.allowed)	|* ref
	if not delete.allowed then
		return(false)
	endif

	return(true)
}

function void deleting_allowed(
	ref		long		o.delete.allowed)
{
	o.delete.allowed = true
}

|************* LOI Number ***********************
function tdisg082.loin.set.field.default()
{
	tdisg082.loin = tcisg000.lser
}

|************* BP Name *******************
function extern boolean tdisg082.bpnm.is.applicable()
{
	if	tdisg082.otbp = tcyesno.yes	then
		return(true)
	endif	
	
	return(false)
}

function extern boolean tdisg082.bpnm.is.mandatory()
{
	if	tdisg082.otbp = tcyesno.yes	then
		return(true)
	endif	
	
	return(false)
}

|************* Supplier Code ********************
function extern boolean tdisg082.suno.is.derived()
{
	if	tdisg082.otbp = tcyesno.yes	then
		tdisg082.suno = tfisg000.bpid
		return(true)
	endif
	
	return(false)
}

|************** Valid Upto **********************
function extern boolean tdisg082.vldt.is.valid()
{
	if	tdisg082.vldt < tdisg082.ldat	then
		dal.set.error.message("@Valid cannot be before LOI Date")
		return(DALHOOKERROR)
	endif
	
	return(true)
}

